*Configuração*
import pandas as pd
import numpy as np
from scipy.stats import ttest_ind

import pandas as pd
import numpy as np
from scipy.stats import ttest_ind

# ------------- HOUSING --------------------
housing = pd.read_csv('City_Zhvi_AllHomes.csv')

housing1 = housing["RegionName"]
housing.drop(housing.columns[[0, 2,3,4,5]], axis=1, inplace=True)
housing.drop(housing.columns[:46], axis=1, inplace=True)
housing["RegionName"]=housing1

# ------------- GDP --------------------
GDP = pd.read_excel ('gdplev.xls', header=None)
GDP = GDP.loc[:,[4,6]]
GDP.rename(columns={4:'Quarterly', 6:'GDP in billions of chained 2009 dollars'},inplace=True)
GDP=GDP[220:]
GDP.index=range(0,len(GDP))
GDP

housing.head()

QUESTION 1
def get_list_of_university_towns():
# ------------- Towns --------------------
#town = pd.read_csv('university_towns.txt', header=None)
town =pd.read_table('university_towns.txt')
    
town["RegionName"]=town["Alabama[edit]"].copy()
town = pd.DataFrame(np.vstack([town.columns, town]))
town.rename(columns={0:'State', 1:'RegionName'},inplace=True)
town

estados = list()
n=0

for pos, i in enumerate(town['State']):
    if '[edit]' in i:
        estados.append(str(i[0:i.find('[')]))
        n+=1
        town = town.drop(pos)
    else:
        town['State'][pos] = estados[n-1]
        town['RegionName'][pos] = str(town['RegionName'][pos][0:i.find('(')])
        
        
town
    
    return "ANSWER"

QUESTION 2
x=GDP.copy()
'''Returns the year and quarter of the recession end time as a 
    string value in a format such as 2005q3'''
def get_recession_start(x):
    flag=0
    recessao=0
    lista = x['GDP in billions of chained 2009 dollars'].tolist()
    while recessao ==0:
        for pos, i in enumerate(lista):
            if pos != 0:
                if lista[pos]-lista[pos-1]<0:
                    #print(lista[pos]-lista[pos-1],flag,recessao)
                    if flag == 0:
                        flag=1
                    else:
                        recessao = 1
                        break
    return GDP['Quarterly'][pos]
get_recession_start(x)


QUESTION 3
x=GDP.copy()
'''Returns the year and quarter of the recession end time as a 
    string value in a format such as 2005q3'''

def get_recession_end(x):
    flag=0
    recessao_end=0
    start = get_recession_start(x)
    lista = x['GDP in billions of chained 2009 dollars'].tolist()
    while recessao_end ==0:
        for pos, i in enumerate(x['Quarterly']):
            if str(i) == start:
                for w in range(pos, len(x)):
                    if lista[pos]-lista[pos-1]>0:
                        print(lista[pos]-lista[pos-1],flag,recessao)
                        if flag == 0:
                            flag=1
                        else:
                            recessao_end = 1
                            break
        return GDP['Quarterly'][w]
                        
                        
                        
                        
get_recession_end(x)

QUESTION 4
y = housing.copy()

def convert_housing_data_to_quarters(y):
    qua = ['q1', 'q2','q3']
    soma=[]
    i=1
    q=0
    for (columnName, columnData) in y.iteritems():
        #print('Colunm Name : ', columnName)
        if i == 1:
            soma=columnData.values
        else:
            soma+=columnData.values
        i+=1
        if i == 5:
            #y[str(columnName)+qua[q]]=soma
            a= columnName[:columnName.find('-')]+str(qua[q])
            y[a]=soma
            soma =0
            q+=1
            i=1
            if q == 3:
                soma =0
                q=1
                i=1
                
            
        
    y.drop(y.columns[:200], axis=1, inplace=True)
        
       #print('Colunm Name : ', columnName)
       #print('Column Contents : ', columnData.values) 
        #print(str(columnName[:columnName.find('-')])+str(qua[q]))
                           
    return y
convert_housing_data_to_quarters(y)